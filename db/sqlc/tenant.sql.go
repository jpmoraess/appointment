// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tenant.sql

package db

import (
	"context"
)

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenant (name, slug)
VALUES ($1, $2)
RETURNING id, name, slug, created_at, updated_at
`

type CreateTenantParams struct {
	Name string `json:"name"`
	Slug string `json:"slug"`
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, createTenant, arg.Name, arg.Slug)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTenant = `-- name: GetTenant :one
SELECT id, name, slug, created_at, updated_at FROM tenant
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTenant(ctx context.Context, id int64) (Tenant, error) {
	row := q.db.QueryRow(ctx, getTenant, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTenants = `-- name: ListTenants :many
SELECT id, name, slug, created_at, updated_at FROM tenant
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTenantsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTenants(ctx context.Context, arg ListTenantsParams) ([]Tenant, error) {
	rows, err := q.db.Query(ctx, listTenants, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tenant{}
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
