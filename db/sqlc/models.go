// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

type Appointment struct {
	ID              int64     `json:"id"`
	TenantID        int64     `json:"tenant_id"`
	ProfessionalID  int64     `json:"professional_id"`
	ServiceID       int64     `json:"service_id"`
	CustomerName    string    `json:"customer_name"`
	AppointmentDate time.Time `json:"appointment_date"`
	Status          string    `json:"status"`
	CreatedAt       time.Time `json:"created_at"`
	UpdatedAt       time.Time `json:"updated_at"`
}

type Professional struct {
	ID        int64       `json:"id"`
	TenantID  int64       `json:"tenant_id"`
	UserID    int64       `json:"user_id"`
	Name      string      `json:"name"`
	Email     pgtype.Text `json:"email"`
	Phone     pgtype.Text `json:"phone"`
	CreatedAt time.Time   `json:"created_at"`
	UpdatedAt time.Time   `json:"updated_at"`
}

type ProfessionalService struct {
	ProfessionalID int64 `json:"professional_id"`
	ServiceID      int64 `json:"service_id"`
	// if the price varies by professional
	Price pgtype.Numeric `json:"price"`
	// if the duration varies by professional
	DurationMinutes pgtype.Int4 `json:"duration_minutes"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
}

type Schedule struct {
	ID             int64 `json:"id"`
	ProfessionalID int64 `json:"professional_id"`
	// 0 (sunday) 6 (saturday)
	DayOfWeek       int32       `json:"day_of_week"`
	StartTime       pgtype.Time `json:"start_time"`
	EndTime         pgtype.Time `json:"end_time"`
	IntervalMinutes int32       `json:"interval_minutes"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
}

type ScheduleOverride struct {
	ID             int64       `json:"id"`
	ProfessionalID int64       `json:"professional_id"`
	OverrideDate   pgtype.Date `json:"override_date"`
	StartTime      pgtype.Time `json:"start_time"`
	EndTime        pgtype.Time `json:"end_time"`
	IsAvailable    bool        `json:"is_available"`
	// reason for override
	Reason    pgtype.Text `json:"reason"`
	CreatedAt time.Time   `json:"created_at"`
	UpdatedAt time.Time   `json:"updated_at"`
}

type Service struct {
	ID              int64          `json:"id"`
	TenantID        int64          `json:"tenant_id"`
	Name            string         `json:"name"`
	Description     pgtype.Text    `json:"description"`
	DurationMinutes int32          `json:"duration_minutes"`
	Price           pgtype.Numeric `json:"price"`
	CreatedAt       time.Time      `json:"created_at"`
	UpdatedAt       time.Time      `json:"updated_at"`
}

type Session struct {
	ID           int64       `json:"id"`
	UserID       int64       `json:"user_id"`
	RefreshToken string      `json:"refresh_token"`
	UserAgent    pgtype.Text `json:"user_agent"`
	IpAddress    pgtype.Text `json:"ip_address"`
	IsActive     bool        `json:"is_active"`
	CreatedAt    time.Time   `json:"created_at"`
	ExpiresAt    time.Time   `json:"expires_at"`
}

type Tenant struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	Slug      string    `json:"slug"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type User struct {
	ID       int64  `json:"id"`
	TenantID int64  `json:"tenant_id"`
	Username string `json:"username"`
	Password string `json:"password"`
	// admin, professional, customer
	Role      string    `json:"role"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}
